#!/bin/env ruby

require 'set'
require 'seapig-client'
require 'typhoeus'

WebSocket.max_frame_size = 200 * 1024 * 1024 # 200MB

$stdout.sync = 1

EM.run {
	seapig_client = SeapigClient.new(ARGV[0], name: 'dealer')

	tasks_to_deal = seapig_client.slave('tasks-to-deal')
	#tasks_to_assign = seapig_client.slave('tasks-to-estimate')
	worker_estimates = seapig_client.slave('estimates:*')
	redeal_queued_for = []
	redeal_timer = nil
	assignments = Hash.new(-1)
	required_tasks_to_deal_version = 0
	last_tasks_to_deal_invalidation = nil
	last_worker_estimates_invalidation = {}

	deal = Proc.new {
		puts 'Re-dealing '+(tasks_to_deal.valid ? tasks_to_deal['tasks'].size.to_s : '---')+ ' tasks because '+redeal_queued_for.join(',')
		redeal_queued_for = []
		EM.cancel_timer(redeal_timer) if redeal_timer
		redeal_timer = nil

		puts 'tasks-to-deal state: %s %s %s'%[tasks_to_deal.valid.inspect, tasks_to_deal.version.inspect, required_tasks_to_deal_version.inspect]

		next if (not tasks_to_deal.valid) or (tasks_to_deal.version['Postgres::Task:waiting'] < required_tasks_to_deal_version)

		puts 'ok, continuing'

		now = Time.new

		redeal_at = nil

		#tasks_to_deal_by_id = tasks_to_deal.clone

		scores = []
		plans = []

		tie_breaker = 0
		worker_estimates.each_pair { |worker, estimates|

			worker = worker.split(':')[1]

			puts 'Considering estimates of %s: %s %s %s'%[worker.inspect, estimates.valid.inspect, estimates['generated_for']['Postgres::Task:assigned:'+worker].inspect, assignments[worker].inspect]

			next if (not estimates.valid) or (not estimates['generated_for']) or ((estimates['generated_for']['Postgres::Task:assigned:'+worker] or 0) < assignments[worker])

			puts  'Versions OK, proceeding: '
			estimates['estimates'].each { |task_id, estimations|
				if not tasks_to_deal['tasks'][task_id] then next end
				estimations.each { |observation_time, estimate|
					#print " %i"%[task_id]
					if observation_time == 'now' then iff=false; observation_time = Time.now else iff=true end
					estimated_end_time = estimate[0].to_i + observation_time.to_i + estimate[2].to_i
					tie_breaker += 1
					scores << [
						(tasks_to_deal['tasks'][task_id.to_s]['priority'] || 10).to_i*(-1),

						estimate[0], #transition duration
						tasks_to_deal['tasks'][task_id.to_s]['execution_id'], #execution id
						tasks_to_deal['tasks'][task_id.to_s]['actor_count'].to_i*(-1), # actor count
						estimated_end_time,
						estimate[2].to_i, #execution duration
						observation_time.to_i,
						tie_breaker,
						iff,
						estimate[1].map{ |set| set.map { |actor| [actor, worker].join(':') } }, #remote ids of designated resources
						task_id.to_i, #task_id, needed for specifying task
						worker #worker needed to reach seapig object
					]
				}
			}
		}

		if redeal_at
			puts '- some offers were delayed, retrying in '+[0, redeal_at-now].max.inspect+'s'
			redeal_timer = EM.add_timer([0, redeal_at-now].max+0.01) {  EM.next_tick(&deal) if (redeal_queued_for << 'processing-delayed-offers').size == 1 }
		end

		assigned_tasks = Set.new
		#used_stations = Set.new

		used_resources = Set.new
		better_future_exists = Set.new

		p ['Current Time', Time.new].join(': ')
		scores.sort.each { |_abs_prio, _transition_duration, _execution_id, _actor_count, _eet, _execution_duration, observation_time, _tie_breaker, iff, alternatives, task_id, worker|

			if not viable_alternative = alternatives.find { |alternative|
					 (alternative & used_resources.to_a).size == 0 }
				#p [task_id,"---- used_resources has all alternatives !"].join(': ')
				next
			end

			if assigned_tasks.include?(task_id)
				#p [task_id,"---- assigned_tasks include",task_id].join(': ');
				next
			end

			if (iff)
				if (observation_time.to_i > Time.now.to_f)
					p '---- queueing task for future: %2s to %2s'%[task_id, worker]
				else
					next
				end
			else
				p '---- assigning task: %s to %s - %s - %s '%[task_id, worker, viable_alternative.map { |a| a.split(':')[0] }, iff]
				p viable_alternative
				p used_resources
				response = Typhoeus.post(ARGV[1]+"/tasks/#{task_id}/status", params: { used_resources: used_resources.to_a, task_id: task_id.to_i, status: 'assigned', worker: worker, iff: iff, actors: viable_alternative.map { |a| a.split(':')[0] } })
				raise 'failed to assign task %i to worker %s, response: %s'%[task_id, worker, response.inspect] if not response.success?
				versions = JSON.parse(response.body)['seapig_dependency_versions']
				puts "\tgot: "+versions.inspect
				assignments[worker] = versions['Postgres::Task:assigned:'+worker]
				last_worker_estimates_invalidation[worker] = Time.new
				required_tasks_to_deal_version = versions['Postgres::Task:waiting']
				last_tasks_to_deal_invalidation = Time.new
			end

			viable_alternative.each { |a| used_resources << a }
			assigned_tasks << task_id
		}

		puts 'Re-dealing loop duration: %f'%(Time.new - now)
	}

	tasks_to_deal.onstatuschange {
		if tasks_to_deal.valid and (tasks_to_deal.version['Postgres::Task:waiting'] >= required_tasks_to_deal_version) and last_tasks_to_deal_invalidation
			puts 'tasks-to-deal refresh time: %f'%(Time.new-last_tasks_to_deal_invalidation)
			last_tasks_to_deal_invalidation = nil

		end
		EM.next_tick(&deal) if (redeal_queued_for << 'tasks-to-deal-changed').size == 1
	}

	worker_estimates.onchange { |object|
		worker = object.id.split(':')[1]
		puts 'worker %s - estimates changed: %s'%[worker, object.version.inspect]
		if object.valid and object['generated_for'] and assignments[worker] and ((object['generated_for']['Postgres::Task:assigned:'+worker] or 0) >= assignments[worker]) and last_worker_estimates_invalidation[worker]
			puts '%s - estimates refresh time: %f'%[worker, Time.new-last_worker_estimates_invalidation[worker]]
			last_worker_estimates_invalidation[worker] = nil
		end
		object.onstatuschange { EM.next_tick(&deal) if (redeal_queued_for << 'worker-estimates-changed').size == 1 }
		EM.next_tick(&deal) if (redeal_queued_for << 'worker-estimates-changed').size == 1
	}
}
